templates:
- name: Beispiel 01
  condition: type != "Gesteinsplanet"
  template: |
    Ist {{ planet | annotate("planet") }} ein {{ "Gesteinsplanet" | annotate("type") }}?
    Nein, {{ planet | annotate("planet") }} {{ ["ist ein", "gehört zur Gruppe"] | random }} {{ type | annotate("type") }}.
    {{ [
        "Wusstest Du schon Folgendes dazu:",
        "Er hat zudem interessante Merkmale:",
        "Interessant dazu ist auch:",
        "Dazu habe ich noch Folgendes gefunden:"
      ] | random }}
    {% for item in characteristics %}\
    - {{ item | annotate("characteristics") }}
    {% endfor %}

- name: Beispiel 02
  condition: moons != 1
  template: |
    {% set characteristic = characteristics | random %}
    Was kannst Du mir zu "{{ characteristic | annotate("characteristics") }} in unserem {{ ["Planetensystem", "Sonnensystem"] | random | annotate("term") }}" sagen?
    {{ characteristic | annotate("characteristics") }} trifft auf{{ [" den Planeten", ""] | random }} {{ planet | annotate("planet") }} zu.
    {{ ["Das ist ein", "Damit gehört der Planet zur Gruppe"] | random }} {{ type | annotate("type") }}.
    {% set facts = [
        "hat einen " ~ ("Durchmesser" | annotate("term")) ~ " von " ~ ((diameter ~ " km") | annotate("diameter")),
        "besitzt " ~ (((moons == 0 and "keine" or moons ~ " Monde") | annotate("moons"))),
        "hat eine " ~ ("Umlaufzeit" | annotate("term")) ~ " von " ~ ((turnover ~ " Tagen") | annotate("turnover"))
    ] %}\
    {% set facts = facts | random_set(2) %}\
    {{ ["Er", "Der Planet"] | random }} {{ facts[0] }} und {{ facts[1] }}.

# Annotating lists in templates requires a bit more effort, but it's not
# technically complex. Two key aspects come into play: template validation and
# the use of generator values.
#
# Every template is validated at load time to catch syntax errors early. This
# validation uses an empty data object. If fields are only printed, this causes
# no issues. However, if fields are used inside functions (e.g. map, join, len),
# they are undefined during validation, which can lead to runtime errors. To
# avoid this, default values are provided for validation purposes. These
# defaults are not used during actual rendering and are simply placeholders to
# ensure the template compiles.
#
# The second aspect involves generator values, which are often produced by
# functions like map. While generators behave similarly to lists, they do not
# support essential operations like len(). Attempting to use such operations on
# a generator will result in errors. Therefore, generator values must be
# explicitly converted into lists using list() before further processing.
- name: Beispiel 03
  condition: moons != 1
  template: |
    {{ ["Der Planet ", ""] | random }}{{ planet | annotate("planet") }} ist ein {{ type | annotate("type") }} \
    {% set facts = [
        "mit einem " ~ ("Durchmesser" | annotate("term")) ~ " von " ~ ((diameter ~ " km") | annotate("diameter")),
        "besitzt " ~ (((moons == 0 and "keine" or moons ~ " Monde") | annotate("moons"))),
        "mit einer " ~ ("Umlaufzeit" | annotate("term")) ~ " von " ~ ((turnover ~ " Tagen") | annotate("turnover"))
    ] %}\
    {{ facts[0] }} und {{ facts[1] }}.
    {% set atmosphere = atmosphere | default([]) | map('annotate', 'atmosphere') | list %}
    Die {{ "Atmosphäre" | annotate("term") }} {{ ["besteht", "setzt sich zusammen"] | random }} aus {{ atmosphere | random_range_join_phrase(", ", " und ") }}.
    {{ ["Typisch", "Charakteristisch", "Markant"] | random }} für {{ planet | annotate("planet") }} sind Merkmale wie:
    {% for item in characteristics %}\
    - {{ item | annotate("characteristics") }}
    {% endfor %}

- name: Beispiel 04
  condition: turnover > 365
  template: |
    Gibt es Vorschläge zur Optimierung der Prozesse beim Management?
    Ja -- Wir planen die Verlagerung der Besprechungsräume auf den {{ planet | annotate("planet") }}.
    Dort hat das Jahr {{ (turnover ~ "Tage") | annotate("turnover") }}, was die längeren Besprechungen kompensieren.

- name: Beispiel 05
  condition: moons > 2
  template: |
    Hat {{ planet | annotate("planet") }} mehrere {{ "Monde" | annotate("term") }}?
    Ja und zwar genau {{ moons | annotate("moons") }}{{ [" davon", ""] | random }}.

- name: Beispiel 06
  condition: True
  template: |
    {% set facts = characteristics | random_set(2) %}
    {{ facts[0] | annotate("characteristics") }} \
    {{ ["und", "sowie", "wie auch"] | random }} \
    {{ facts[1] | annotate("characteristics") }} \
    {{ ["sind charakteristisch für", "kennzeichnen"] | random }} \
    {{ planet | annotate("planet") }}.

# During template validation, fields may be undefined if no data is provided.
# This becomes problematic when those fields are used in functions rather than
# just printed. To prevent errors during validation, default values are
# assigned. These defaults ensure the template compiles correctly but are
# ignored during actual rendering.
- name: Beispiel 07
  condition: turnover > 365
  template: |
    {% set turnover_diff = (turnover | default(0, true) | int) - 365 %}
    Im Vergleich zur {{ "Erde" | annotate("term") }} \
    benötigt {{ planet | annotate("planet") }} \
    {{ (turnover_diff ~ " Tage") | annotate("turnover") }} \
    länger für seine {{ "Umlaufbahn" | annotate("term") }}.

# In addition to named entities, custom spans can be defined between entities
# using regular expressions. Regex patterns should be applied to the text
# between entities and must accurately match the desired span. This is useful
# for extracting relational or contextual information not covered by standard
# NER.
- name: Beispiel 08
  condition: True
  spans:
  - label: "PAIR"
    pattern: (?<=[\"\'])\w+:\s.*?(?=[\"\'])
  template: |
    '{{ "planet" | annotate("term") }}: {{ planet | annotate("planet") }}', \
    '{{ "type" | annotate("term") }}: {{ type | annotate("type") }}', \
    '{{ "diameter" | annotate("term") }}: {{ diameter | annotate("diameter") }}', \
    '{{ "turnover" | annotate("term") }}: {{ turnover | annotate("turnover") }}', \
    '{{ "moons" | annotate("term") }}: {{ moons | annotate("moons") }}'\
    {% for item in atmosphere %}\
    , '{{ "atmosphere" | annotate("term") }}: {{ item | annotate("atmosphere") }}'\
    {% endfor %}\
    {% for item in characteristics %}\
    , '{{ "characteristics" | annotate("term") }}: {{ item | annotate("characteristics") }}'\
    {% endfor %}
